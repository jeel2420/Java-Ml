package com.javaml.ml;

import java.awt.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.io.File;
import weka.core.Stopwords;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;

public class Main {

    public static void main(String[] args) throws Exception {

        Path path = Paths.get(System.getProperty("user.dir")).resolve("spmsga1.txt");

        BufferedReader reader = new BufferedReader(new FileReader(path.toFile()));

        Map<String, Integer> frequency = new LinkedHashMap<>();

        String line = reader.readLine();

        Functions f=new Functions(); //Object of the Functions class to implement any preprocessing tasks.

        line = f.stemming_string(line);  //Stemming the string

        line=f.remove_marks(line);  //Return a line without any marks (specified in the 'or' condition)


        f.stopwords_removal(frequency);
        
        System.out.println(frequency);
    }
}

class Functions{
    void stopwords_removal(Map<String,Integer> frequency){
        for(int pos=0;pos<frequency.size();pos++) {
            String response = (String) (frequency.keySet().toArray())[pos];
            if(Stopwords.isStopword(response)){
                frequency.remove(response);
            }
        }
    }

    String remove_marks(String line){
        StringBuilder str=new StringBuilder(line);  //String builder was used because, I wanted to use setCharAt()
        for(int i=0;i<line.length();i++) {
            char r = line.toCharArray()[i];
            if (r == '?' || r == '!' || r == '/' || r == '@') {
                str.setCharAt(i,' ');
            }
        }
        return str.toString();
    }

    String stemming_string(String line){
        Stemmer stem= new SnowballStemmer(line); //Snowball is a type of stemming

        line = stem.stem(line);  //In-built function for stemming

        return line;
    }
}
